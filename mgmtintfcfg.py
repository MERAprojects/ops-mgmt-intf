#!/usr/bin/env python
# Copyright (C) 2014-2015 Hewlett-Packard Development Company, L.P.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import os
import sys
from time import sleep

import ovs.dirs
import ovs.daemon
import ovs.db.idl
import ovs.unixctl
import ovs.unixctl.server
import argparse
import ovs.vlog
import commands
from socket import inet_ntoa
from struct import pack

from pyroute2 import IPRoute
from pyroute2.netlink import NetlinkError

OPEN_VSWITCH_TABLE = "Open_vSwitch"
DNS_FILE = "/etc/resolv.conf"
DEFAULT_DNS_1 = '8.8.4.4'
DEFAULT_DNS_2 = '8.8.8.8'
DEFAULT_IPV4 = '0.0.0.0'

DEF_DB = 'unix:/var/run/openvswitch/db.sock'
OVS_SCHEMA = '/usr/share/openvswitch/vswitch.ovsschema'

# Anything that starts with 127.0.0 will be taken as loopback address.
LOOPBACK_ADDR = "127.0.0"
# Wait 2 seconds for the DHCP client to restart.
DHCP_RESTART_WAIT_TIME = 2

MGMT_INTF_NULL_VAL = 'null'
MGMT_INTF_NAMESERVER_STR_LEN = 11

MGMT_INTF_KEY_NAME = "name"
MGMT_INTF_KEY_MODE = "mode"
MGMT_INTF_KEY_IP = "ip"
MGMT_INTF_KEY_SUBNET = "subnet-mask"
MGMT_INTF_KEY_DEF_GW = "default-gateway"
MGMT_INTF_KEY_DNS1 = "dns-server-1"
MGMT_INTF_KEY_DNS2 = "dns-server-2"
MGMT_INTF_MODE_DHCP = "dhcp"
MGMT_INTF_MODE_STATIC = "static"
MGMT_INTF_KEY_IPV6 = "ipv6"
MGMT_INTF_KEY_DEF_GW_V6 = "default-gateway-v6"
MGMT_INTF_KEY_IPV6_LINK_LOCAL = "ipv6-linklocal"
#IPv6 Macros
DEFAULT_IPV6 = "::"
#Ipv6 family
AF_INET6 = 10
#IPv6 scope macros
SCOPE_IPV6_GLOBAL = 0
SCOPE_IPV6_LINK_LOCAL = 253

# Program control.
exiting = False

mode_val = MGMT_INTF_MODE_DHCP

#Logging.
vlog = ovs.vlog.Vlog("mgmtintfcfg")

def mgmt_intf_unixctl_exit(conn, unused_argv, unused_aux):
    global exiting

    exiting = True
    conn.reply(None)

'''
  Function to empty the DNS's resolve.conf file.
  This is to avoid the system from using any default DNS server addresses
  that are generated by DNS daemon.
'''
def mgmt_intf_clear_dns_conf():
    newdata = ""

    try:
        fd = open(DNS_FILE, 'w')
        fd.write(newdata)
    except IOError:
        vlog.err("File operation failed for file " + DNS_FILE)
    finally:
        fd.close()

    return True

# Function to add IP and netmask.
def mgmt_intf_add_ip(mgmt_intf, ip_val, prefixlen):

    # Input validation.
    if ip_val == DEFAULT_IPV4 or prefixlen == 0:
        vlog.err("Trying to add NULL IP")
        return False

    ip = DEFAULT_IPV4
    prefix = 0

    try:
        ipr = IPRoute()
        # lookup interface by name.
        dev = ipr.link_lookup(ifname=mgmt_intf)[0]

        # Get the IP configured and check if the IP we are trying to configure is already present.
        ip_list = [x.get_attr('IFA_ADDRESS') for x in ipr.get_addr(label=mgmt_intf)]
        if ip_list:
            ip = ip_list[0]
        prefix_list = [x['prefixlen'] for x in ipr.get_addr(label=mgmt_intf)]
        if prefix_list:
            prefix = prefix_list[0]

        # If same IP already configured then do nothing.
        if ip == ip_val and prefixlen == prefix:
            ipr.close()
            return True
        elif ip != DEFAULT_IPV4 and prefix != 0:
            ipr.addr('delete', dev, address=ip, mask=prefix)

        # Add IP to the interface.
        ipr.addr('add', dev, address=ip_val, mask=prefixlen)
        ipr.close()

    except NetlinkError as e:
        vlog.err("Adding IP %s/%s on Mgmt Interface %s failed with code %d"%(ip_val,prefixlen, mgmt_intf, e.code))
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        return False

    vlog.info("Configured IP %s/%s on Mgmt Interface %s"%(ip_val,prefixlen, mgmt_intf))
    return True

# Function to remove statically configured IP and subnet mask.
def mgmt_intf_remove_ip(mgmt_intf, ip_val, prefixlen):

    ip = DEFAULT_IPV4
    prefix = 0

    try:
        ipr = IPRoute()
        # Get the configured IP and see if the IP we are trying to remove is present.
        ip_list = [x.get_attr('IFA_ADDRESS') for x in ipr.get_addr(label=mgmt_intf)]
        if ip_list:
            ip = ip_list[0]
            prefix_list = [x['prefixlen'] for x in ipr.get_addr(label=mgmt_intf)]
            if prefix_list:
                prefix = prefix_list[0]
        else:
            # No IP is available on the interface. So there is nothing to remove.
            ipr.close()
            return True

        # If the IP we are trying to remove not present, then nothing to remove.
        if ip_val != DEFAULT_IPV4 and ip != ip_val and prefixlen != prefix:
            ipr.close()
            return True

        # Incase of flush, the input will be default ip. In this case, clear the IP that is available
        if ip_val == DEFAULT_IPV4 and ip != DEFAULT_IPV4:
            ip_val = ip
            prefixlen = prefix

        # lookup interface by name.
        dev = ipr.link_lookup(ifname=mgmt_intf)[0]
        # Remove the IP.
        ipr.addr('delete', dev, address=ip_val, mask=prefixlen)
        ipr.close()
    except NetlinkError as e:
        vlog.err("Removing IP %s/%s on Mgmt Interface %s failed with code %d"%(ip_val, prefixlen, mgmt_intf, e.code))
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        return False

    vlog.info("Removed IP %s/%s on Mgmt Interface %s"%(ip_val,prefixlen, mgmt_intf))
    return True

# Function to configure default gateway.
def mgmt_intf_add_def_gw(def_gw):

    cfg_gw = DEFAULT_IPV4
    # Input validation.
    if def_gw == DEFAULT_IPV4:
        return False

    try:
        ipr = IPRoute()
        # Get the existing default routes if any.
        if ipr.get_default_routes(table=254):
            gw_list = [x.get_attr('RTA_GATEWAY') for x in ipr.get_default_routes(table=254)]
            if gw_list:
                cfg_gw = gw_list[0]
                # If default route is already present then nothing to do.
        if cfg_gw == def_gw:
            ipr.close()
            return True
        elif cfg_gw != DEFAULT_IPV4:
            ipr.route('delete', gateway=cfg_gw)

        # Configure the default gateway.
        ipr.route('add', gateway=def_gw)
        ipr.close()
    except NetlinkError as e:
        vlog.err("Adding default gateway %s on mgmt interface failed with code %d"%(def_gw, e.code))
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        return False

    vlog.info("Configured default gateway %s on Mgmt Interface"%def_gw)
    return True

# Function to remove configured default gateway.
def mgmt_intf_remove_def_gw(def_gw):

    cfg_gw = DEFAULT_IPV4

    try:
        ipr = IPRoute()
        # Get the configured gateway.
        if ipr.get_default_routes(table=254):
            gw_list = [x.get_attr('RTA_GATEWAY') for x in ipr.get_default_routes(table=254)]
            if gw_list:
                cfg_gw = gw_list[0]
            else:
                # There is not default gateway to remove. So return.
                ipr.close()
                return True

        # Gateway does not exists. So nothing to remove.
        if def_gw != DEFAULT_IPV4 and cfg_gw != def_gw:
            ipr.close()
            return True

        # Incase of flush, the input will be default gateway. In this case, remove the default gateway that is available.
        if def_gw == DEFAULT_IPV4:
            def_gw = cfg_gw

        # If gateway available, then delete
        if def_gw != DEFAULT_IPV4:
            # Remove the default gateway.
            ipr.route('delete', gateway=def_gw)

        ipr.close()
    except NetlinkError as e:
        vlog.err("Removing default gateway %s from mgmt interface failed with code %d"%(def_gw, e.code))
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        return False

    vlog.info("Removed default gateway %s on Mgmt Interface"%def_gw)
    return True

# Function to remove all the parameters that were configured statically from cache and OVSDB.
def mgmt_intf_clear_static_val(mgmt_intf):
    # No need to check the return value here. If value is not present to remove these calls may fail,
    # which is ok in this case.
    mgmt_intf_remove_ip(mgmt_intf, DEFAULT_IPV4, 0)
    mgmt_intf_remove_def_gw(DEFAULT_IPV4)
    mgmt_intf_clear_dns_conf()
    vlog.info("Cleared all statically configured values on mgmt interface")

# Update the OVSDB with the updated values.
def mgmt_intf_clear_status_col(idl):

    ovs_rec = {}
    for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
        if ovs_rec.mgmt_intf_status:
            break

    data = {}

    txn = ovs.db.idl.Transaction(idl)

    setattr(ovs_rec, "mgmt_intf_status", data)

    status = txn.commit_block()
    if status != "success" and status != "unchanged":
        vlog.err("Clearing status column from ovsdb failed with status %s"%(status))

        return False

    return True

# Function to update the resolved conf file with the values statically configured by the user.
def mgmt_intf_update_dns_conf(dns_1, dns_2):

    cmd = ""
    if dns_1 != DEFAULT_IPV4:
        cmd = "nameserver %s\n" % (dns_1)
    if dns_2 != DEFAULT_IPV4:
        cmd += "nameserver %s\n" % (dns_2)

    try:
        fd = open(DNS_FILE, 'w')
        fd.write(cmd)
        fd.close()
    except IOError:
        vlog.err("File operation failed for file " + DNS_FILE)
        fd.close()
        return False
    finally:
        fd.close()

    return True

# Function to clear the entries populated by DHCP client
def mgmt_intf_clear_dhcp_val(mgmt_intf):
    '''
    #Direct flushing with following APIs are not working.
    ipr.flush_addr(label=mgmt_intf)
    ipr.flush_routes(label=mgmt_intf)
    '''
    # Removing the DHCP populated IP address and default gateway.
    try:
        ipr = IPRoute()
        if ipr.get_addr(label=mgmt_intf):
            ip_list = [x.get_attr('IFA_ADDRESS') for x in ipr.get_addr(label=mgmt_intf)]
            if ip_list:
                ip = ip_list[0]
                prefix_list = [x['prefixlen'] for x in ipr.get_addr(label=mgmt_intf)]
                if prefix_list:
                    prefix = prefix_list[0]

                    # lookup interface by name.
                    dev = ipr.link_lookup(ifname=mgmt_intf)[0]
                    ipr.addr('delete', dev, address=ip, mask=prefix)

        if ipr.get_default_routes(table=254):
            gw_list = [x.get_attr('RTA_GATEWAY') for x in ipr.get_default_routes(table=254)]
            if gw_list:
                cfg_gw = gw_list[0]
                # Remove the default gateway.
                ipr.route('delete', gateway=cfg_gw)
        ipr.close()
    except NetlinkError as e:
        vlog.err("Removing DHCP populated values failed with code %d"%e.code)
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        return False

    return True

# Function to start the DHCP client on the mgmt interface.
def mgmt_intf_start_dhcp_client(idl, intf_val):

    # During startup the management interface will not be available to the caller.
    # In that case retrieve the management interface from ovsdb.
    if intf_val == MGMT_INTF_NULL_VAL:
        mgmt_intf = MGMT_INTF_NULL_VAL
        for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
            if ovs_rec.mgmt_intf:
                mgmt_intf = ovs_rec.mgmt_intf.get(MGMT_INTF_KEY_NAME,MGMT_INTF_NULL_VAL)
                break

        if mgmt_intf == MGMT_INTF_NULL_VAL:
            vlog.err("Could not start the DHCP client during startup. Management Interface was not available.")
            return False
    else:
        mgmt_intf = intf_val

    # Start IPv4 DHCP client.
    dhcp_str = "systemctl start dhclient@" + mgmt_intf + ".service"
    os.system(dhcp_str)
    vlog.info("Started dhcp v4 client on interface " + mgmt_intf)

    # Start IPv6 DHCP client.
    dhcp_str = "systemctl start dhclient6@" + mgmt_intf + ".service"
    os.system(dhcp_str)
    vlog.info("Started dhcp v6 client on interface " + mgmt_intf)

    return True

# Function to stop the DHCP client.
def mgmt_intf_stop_dhcp_client(mgmt_intf):

    # Check if the DHCP client is running.
    dhcp_str = "systemctl status dhclient@" + mgmt_intf + ".service"
    status, output = commands.getstatusoutput(dhcp_str)
    if not status:
        if "running" in output:
            # No need to check for IPv6 status, as we start both and stop both together.
            # Stop the IPv4 dhcp client.
            dhcp_str = "systemctl stop dhclient@" + mgmt_intf + ".service"
            os.system(dhcp_str)
            vlog.info("Stopped dhcp v4 client on interface " + mgmt_intf)

            # Stop the IPv6 dhcp client.
            dhcp_str = "systemctl stop dhclient6@" + mgmt_intf + ".service"
            os.system(dhcp_str)
            vlog.info("Stopped dhcp v6 client on interface " + mgmt_intf)

            sleep(DHCP_RESTART_WAIT_TIME)

# Function to process the mode transition from dhcp to static
def mgmt_intf_static_mode_handler(idl, mgmt_intf):
    # Stop DHCP client.
    mgmt_intf_stop_dhcp_client(mgmt_intf)

    # Remove entries populated by DHCP.
    mgmt_intf_clear_dhcp_val(mgmt_intf)

    # Remove any default DNS server Ips populated by DNS daemon.
    mgmt_intf_clear_dns_conf()

    # Clear status column
    mgmt_intf_clear_status_col(idl)

# Function to process the mode transition from static to dhcp
def mgmt_intf_dhcp_mode_handler(idl, mgmt_intf):
    # Flush out the statically configured values if any.
    mgmt_intf_clear_static_val(mgmt_intf)

    # Start the DHCP client
    mgmt_intf_start_dhcp_client(idl, mgmt_intf)

    # Clear status column
    mgmt_intf_clear_status_col(idl)

# Function to add IPv6 and prefix
def mgmt_intf_add_ipv6(mgmt_intf, ipv6_addr, ipv6_prefix ):

    # Input validation
    if ipv6_addr == DEFAULT_IPV6 or ipv6_prefix == 0:
        vlog.err("IPv6: Trying to add NULL IP")
        return False

    try:
        ipr = IPRoute()

        # lookup interface by name
        dev = ipr.link_lookup(ifname=mgmt_intf)[0]
        # Get the configured IP and see if the IP is present.
        ip_list = [x.get_attr('IFA_ADDRESS') for x in ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_GLOBAL)]
        prefix_list = [x['prefixlen'] for x in ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_GLOBAL)]
        ind = 0
        for ip in ip_list:
            if ip == ipv6_addr and ipv6_prefix == prefix_list[ind]:
                ipr.close()
                return True
            ind = ind +1

        # Add IP to the interface
        ipr.addr('add', dev, address=ipv6_addr, mask=ipv6_prefix)

        # Get the configured IP and see if the IP is present.
        ip_list = [x.get_attr('IFA_ADDRESS') for x in ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_GLOBAL)]
        if ip_list:
            ip = ip_list[0]
        prefix_list = [x['prefixlen'] for x in ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_GLOBAL)]
        if prefix_list:
            prefix = prefix_list[0]

        ipr.close()

        # If the IP configs are updated properly then update the DB status column
        if ip == ipv6_addr and ipv6_prefix == prefix:
            vlog.info("Configure static Ipv6 address: success")
            return True
        else:
            vlog.err("Configure static Ipv6 address: failed")
            return False

    except NetlinkError as e:
        vlog.err("Adding Ipv6 %s/%s on Mgmt Interface %s failed with error code=%d",ipv6_addr, ipv6_prefix, mgmt_intf, e.code )
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        return False

    return True

# Function to remove statically configured IP and subnet mask
def mgmt_intf_remove_ipv6(mgmt_intf):

    try:
        ipr = IPRoute()
        # lookup interface by name
        dev = ipr.link_lookup(ifname=mgmt_intf)[0]
        # Get the configured IP and see if the IP we are trying to remove is present.
        ip_list = [x.get_attr('IFA_ADDRESS') for x in ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_GLOBAL)]
        prefix_list = [x['prefixlen'] for x in ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_GLOBAL)]
        ind = 0
        for ip in ip_list:
            ipr.addr('delete', dev, address=ip, mask=prefix_list[ind])
            ind = ind +1

        ipr.close()

    except NetlinkError as e:
        vlog.err("Remove Ipv6 Mgmt Interface %s failed with error code=%d", mgmt_intf, e.code )
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        return False

    return True

# Function to configure default gateway
def mgmt_intf_add_def_gw_ipv6(def_gw_ipv6):

    cfg_gw_ipv6 = DEFAULT_IPV6
    # Input validation
    if def_gw_ipv6 == DEFAULT_IPV6:
        return False

    try:
        ipr = IPRoute()
        # Get the existing default routes if any
        if ipr.get_default_routes(family=AF_INET6):
            gw_list = [x.get_attr('RTA_GATEWAY') for x in ipr.get_default_routes(family=AF_INET6)]
            if gw_list:
                cfg_gw_ipv6 = gw_list[0]
                # If default route is already present then nothing to do
        if cfg_gw_ipv6 == def_gw_ipv6:
            ipr.close()
            return True

        # Configure the default gateway
        ipr.route('add', gateway = def_gw_ipv6,family = AF_INET6)

        if ipr.get_default_routes(family=AF_INET6):
            gw_list = [x.get_attr('RTA_GATEWAY') for x in ipr.get_default_routes(family=AF_INET6)]
            if gw_list:
                cfg_gw_ipv6 = gw_list[0]

        ipr.close()
        # If default route is properly configured then update the DB status column
        if cfg_gw_ipv6 == def_gw_ipv6:
            vlog.info("Configure default gateway IPv6: success")
        else:
            vlog.info("Configure default gateway IPv6: failed")
            return False

    except NetlinkError as e:
        vlog.err("Adding Ipv6 default gateway %s on Mgmt Interface failed with error code=%d"%( def_gw_ipv6, e.code) )
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        return False

    return True

# Function to remove configured default gateway
def mgmt_intf_remove_def_gw_ipv6(def_gw_ipv6):

    if def_gw_ipv6 == DEFAULT_IPV6:
        return False

    cfg_gw_ipv6 = DEFAULT_IPV6

    try:
        ipr = IPRoute()
        # Get the configured gateway
        if ipr.get_default_routes(family=AF_INET6):
            gw_list = [x.get_attr('RTA_GATEWAY') for x in ipr.get_default_routes(family=AF_INET6)]
            if gw_list:
                cfg_gw_ipv6 = gw_list[0]
        # Gateway does not exist. So nothing to remove
        if cfg_gw_ipv6 != def_gw_ipv6:
            ipr.close()
            return True
        # Remove the default gateway
        ipr.route('delete', gateway=def_gw_ipv6,family=AF_INET6)
        ipr.close()
    except NetlinkError as e:
        vlog.err("Removing Ipv6 default gateway %s on Mgmt Interface failed with error code=%d", def_gw_ipv6, e.code )
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        return False

    return True

# Function to clear the IPv6 values.
def mgmt_intf_clear_ipv6_param(mgmt_intf, def_gw_ipv6):
    mgmt_intf_remove_ipv6(mgmt_intf)
    mgmt_intf_remove_def_gw_ipv6(def_gw_ipv6)

    return True

# Function to fetch row and handle the configurations.
# Only modified variables are handled.
def mgmt_intf_cfg_update(idl):
    global mode_val

    mgmt_intf = MGMT_INTF_NULL_VAL

    status_data = {}
    status_col_updt_reqd = False

    # Retrieve the data from status table
    for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
        if ovs_rec.mgmt_intf_status:
            status_data = ovs_rec.mgmt_intf_status
            break

    # Retrieve the mode and interface from config table
    for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
        if ovs_rec.mgmt_intf:
            mgmt_intf = ovs_rec.mgmt_intf.get(MGMT_INTF_KEY_NAME, MGMT_INTF_NULL_VAL)
            value =  ovs_rec.mgmt_intf.get(MGMT_INTF_KEY_MODE, MGMT_INTF_NULL_VAL)
            if value != MGMT_INTF_NULL_VAL:
            #---------------  MODE HANDLER ---------------------------------------
                # Mode configuration did not change. So nothing to update.
                if value != mode_val:
                    # If mode is static:
                    #   Stop the dhcp client (if it was running)
                    #   Clear the values from status column
                    if value == MGMT_INTF_MODE_STATIC:
                        # Link local will not be retrieved again. So preserve it across mode change.
                        ipv6_link_local = status_data.get(MGMT_INTF_KEY_IPV6_LINK_LOCAL, DEFAULT_IPV6)
                        mgmt_intf_clear_ipv6_param(mgmt_intf, status_data.get(MGMT_INTF_KEY_DEF_GW_V6, DEFAULT_IPV6))
                        mgmt_intf_static_mode_handler(idl, mgmt_intf)

                        status_data = {}
                        if ipv6_link_local != DEFAULT_IPV6:
                            status_data[MGMT_INTF_KEY_IPV6_LINK_LOCAL] = ipv6_link_local
                            status_col_updt_reqd = True
                    else:
                        # Mode is DHCP
                        # Link local will not be retrieved again. So preserve it across mode change.
                        ipv6_link_local = status_data.get(MGMT_INTF_KEY_IPV6_LINK_LOCAL, DEFAULT_IPV6)
                        mgmt_intf_clear_ipv6_param( mgmt_intf, status_data.get(MGMT_INTF_KEY_DEF_GW_V6, DEFAULT_IPV6))
                        mgmt_intf_dhcp_mode_handler(idl, mgmt_intf)

                        status_data = {}
                        if ipv6_link_local != DEFAULT_IPV6:
                            status_data[MGMT_INTF_KEY_IPV6_LINK_LOCAL] = ipv6_link_local
                            status_col_updt_reqd = True
                    mode_val = value
        else:
            continue

        if mgmt_intf == MGMT_INTF_NULL_VAL:
            vlog.err("Could not update configured values. Management Interface was not available.")
            return False

        cfg_ip = DEFAULT_IPV4
        dns1 = DEFAULT_IPV4

        # interface already obtained. So iterate other values now.
        for key, value in ovs_rec.mgmt_intf.items():
            #-------------------------IP HANDLER ------------------------------------
            if key == MGMT_INTF_KEY_IP:
                if mode_val != MGMT_INTF_MODE_STATIC:
                    continue

                # Get the previously configured IP if any and check if we are trying to update the same value.
                prev_ip = status_data.get(MGMT_INTF_KEY_IP, DEFAULT_IPV4)
                if prev_ip == value:
                    continue

                # If any IP was previously configured and the user tries to configure another one now,
                # then delete the old IP
                if prev_ip != DEFAULT_IPV4:
                    prev_subnet = status_data.get(MGMT_INTF_KEY_SUBNET, DEFAULT_IPV4)
                    if prev_subnet != DEFAULT_IPV4:
                        prefix = sum([bin(int(x)).count('1') for x in prev_subnet.split('.')])
                        mgmt_intf_remove_ip(mgmt_intf, prev_ip, prefix)
                    else:
                        # IP was there but subnet not found. So remove the ip.
                        del status_data[MGMT_INTF_KEY_IP]
                        status_col_updt_reqd = True

                if value == DEFAULT_IPV4:
                    # Previously configured IP is removed in above condition.
                    # So only update status column here.
                    del status_data[MGMT_INTF_KEY_IP]
                    del status_data[MGMT_INTF_KEY_SUBNET]
                    status_col_updt_reqd = True

                # Update this value to be added when subnet key is processed.
                cfg_ip = value
            #-------------------------SUBNET HANDLER ------------------------------------
            if key == MGMT_INTF_KEY_SUBNET:
                if mode_val != MGMT_INTF_MODE_STATIC:
                    continue

                # If the configured IP is not valid then continue. This will happen in ip remove case.
                if cfg_ip == DEFAULT_IPV4:
                    continue

                # If value is 0.0.0.0 then the handling is already done in IP handler.
                if value == DEFAULT_IPV4:
                    continue

                # If adding IP fails then ip will not be updated in status column so that it will be retried again.
                prefix = sum([bin(int(x)).count('1') for x in value.split('.')])
                if mgmt_intf_add_ip(mgmt_intf, cfg_ip, prefix):
                    status_data[MGMT_INTF_KEY_IP] = cfg_ip
                    status_data[MGMT_INTF_KEY_SUBNET] = value
                    status_col_updt_reqd = True

            #-------------------------IPv6 HANDLER ------------------------------------
            if key == MGMT_INTF_KEY_IPV6:
                if mode_val != MGMT_INTF_MODE_STATIC:
                    continue

                # Get the previously configured IPv6 if any and check if we are trying to update the same value.
                prev_ip = status_data.get(MGMT_INTF_KEY_IPV6, DEFAULT_IPV6)
                if prev_ip == value:
                    continue

                if prev_ip != DEFAULT_IPV6:
                    # If IPv6 is set again the previous value has to be removed before the new one is set.
                    mgmt_intf_remove_ipv6(mgmt_intf)
                    del status_data[MGMT_INTF_KEY_IPV6]
                    status_col_updt_reqd = True

                if value != DEFAULT_IPV6:
                    offset = value.find('/')
                    ipv6_addr = value[0:offset]
                    ipv6_prefix = int(value[offset+1:len(value)])
                    if mgmt_intf_add_ipv6(mgmt_intf,ipv6_addr,ipv6_prefix):
                        status_data[MGMT_INTF_KEY_IPV6] = value
                        status_col_updt_reqd = True

            #-------------------------DEFAULT GATEWAY HANDLER ------------------------------------
            if key == MGMT_INTF_KEY_DEF_GW:
                if mode_val != MGMT_INTF_MODE_STATIC:
                    continue

                # Get the previously configured gw if any and check if we are trying to update the same value.
                prev_gw = status_data.get(MGMT_INTF_KEY_DEF_GW,DEFAULT_IPV4)
                if prev_gw == value:
                    continue

                # If any gw was previously configured and the user tries to configure another one now,
                # then delete the old gw.
                if prev_gw != DEFAULT_IPV4:
                    mgmt_intf_remove_def_gw(prev_gw)

                # No default-gateway case.
                if value == DEFAULT_IPV4:
                    # Previously configured gw is removed in above condition.
                    # So only update status column here.
                    del status_data[MGMT_INTF_KEY_DEF_GW]
                    status_col_updt_reqd = True
                    continue

                # If adding default gateway fails then default gateway will not be updated in
                # status column, so that it will be retried again.
                if mgmt_intf_add_def_gw(value):
                    status_data[MGMT_INTF_KEY_DEF_GW] = value
                    status_col_updt_reqd = True

            #-------------------------DEFAULT GATEWAY HANDLER IPV6------------------------------------
            if key == MGMT_INTF_KEY_DEF_GW_V6:
                if mode_val != MGMT_INTF_MODE_STATIC:
                    continue

                # Get the previously configured gw if any and check if we are trying to update the same value.
                prev_gw = status_data.get(MGMT_INTF_KEY_DEF_GW_V6,DEFAULT_IPV6)
                if prev_gw == value:
                    continue

                if value != DEFAULT_IPV6:
                    if prev_gw != DEFAULT_IPV6:
                        mgmt_intf_remove_def_gw_ipv6(prev_gw)
                        del status_data[MGMT_INTF_KEY_DEF_GW_V6]

                    if mgmt_intf_add_def_gw_ipv6(value):
                        status_data[MGMT_INTF_KEY_DEF_GW_V6] = value
                        status_col_updt_reqd = True
                else:
                    mgmt_intf_remove_def_gw_ipv6(prev_gw)
                    if prev_gw != DEFAULT_IPV6:
                        del status_data[MGMT_INTF_KEY_DEF_GW_V6]
                        status_col_updt_reqd = True
            #-------------------------PRIMARY DNS HANDLER ------------------------------------
            if key == MGMT_INTF_KEY_DNS1:
                if mode_val != MGMT_INTF_MODE_STATIC:
                    continue

                # Get the previously configured dns1 if any and check if we are trying to update the same value.
                prev_dns = status_data.get(MGMT_INTF_KEY_DNS1, DEFAULT_IPV4)
                if prev_dns == value:
                    continue

                # If any dns1 was previously configured and the user tries to configure another one now,
                # then delete the old dns1
                if prev_dns != DEFAULT_IPV4:
                    # We cannot configure secondary without configuring primary. So flush the dns values
                    mgmt_intf_clear_dns_conf()

                # no nameserver <ip-addr case>.
                if (value == DEFAULT_IPV4) or (value == DEFAULT_IPV6):
                    '''
                      Previously configured dns1 is removed here.
                      Sometimes when the daemon restarts again the dns value might not be present.
                      So check and then remove
                    '''
                    if status_data.get(MGMT_INTF_KEY_DNS1, DEFAULT_IPV4) != DEFAULT_IPV4:
                        del status_data[MGMT_INTF_KEY_DNS1]
                        status_col_updt_reqd = True
                        continue

                # If adding dns1 fails then dns1 will not be updated in status column,
                # so that it will be retried again.
                if mgmt_intf_update_dns_conf(value, DEFAULT_IPV4):
                    status_data[MGMT_INTF_KEY_DNS1] = value
                    status_col_updt_reqd = True
            #-------------------------SECONDARY DNS HANDLER ------------------------------------
            if key == MGMT_INTF_KEY_DNS2:
                if mode_val != MGMT_INTF_MODE_STATIC:
                    continue

                dns2 = status_data.get(MGMT_INTF_KEY_DNS2, DEFAULT_IPV4)
                # no nameserver <dns1-ip-addr> <dns2-ip-addr> case.
                if ((value == DEFAULT_IPV4) or (value == DEFAULT_IPV6)) and (dns2 != DEFAULT_IPV4):
                    mgmt_intf_clear_dns_conf()
                    '''
                     DNS1 would have been deleted already in DNS1 handler.
                     So delete DNS2 alone here.
                    '''
                    del status_data[MGMT_INTF_KEY_DNS2]
                    status_col_updt_reqd = True
                    continue

                # Secondary cannot be configured without primary. So if primary DNS is not present,
                # then dont update secondary DNS too.
                dns1 = status_data.get(MGMT_INTF_KEY_DNS1, DEFAULT_IPV4)
                if dns1 == DEFAULT_IPV4:
                    continue

                # Get the previously configured dns2 if any and check if we are trying to update the same value.
                prev_dns = status_data.get(MGMT_INTF_KEY_DNS2, DEFAULT_IPV4)
                if prev_dns == value:
                    continue

                # If any dns2 was previously configured and the user tries to configure another one now,
                # then delete the old dns2
                if prev_dns != DEFAULT_IPV4:
                    # Remove the previous dns2 alone
                    mgmt_intf_update_dns_conf(dns1, DEFAULT_IPV4)

                # If adding dns1 fails then dns1 will not be updated in status column,
                # so that it will be retried again.
                if mgmt_intf_update_dns_conf(dns1, value):
                    status_data[MGMT_INTF_KEY_DNS2] = value
                    status_col_updt_reqd = True

    try:
        fd = open(DNS_FILE, 'r')
        output = fd.read()
        # If no DNS address then resolved writes default values.
        # So flush out these default values.
        if DEFAULT_DNS_1 in output or DEFAULT_DNS_2 in output:
            mgmt_intf_clear_dns_conf()

            # Remove the configured DNS values from status column, so that the configuration will be
            # written into the conf file and status col will be updated next time when cfg_update happens.
            dns_1 = status_data.get(MGMT_INTF_KEY_DNS1, DEFAULT_IPV4)
            if  dns_1 != DEFAULT_IPV4:
                mgmt_intf_update_dns_conf(dns_1, DEFAULT_IPV4)
                dns_2 = status_data.get(MGMT_INTF_KEY_DNS2, DEFAULT_IPV4)
                if  dns_2 != DEFAULT_IPV4:
                    mgmt_intf_update_dns_conf(dns_1, dns_2)
        fd.close()
    except IOError:
        vlog.err("File operation failed for file " + DNS_FILE)


    if (status_col_updt_reqd):
        txn = ovs.db.idl.Transaction(idl)

        setattr(ovs_rec, "mgmt_intf_status", status_data)

        status = txn.commit_block()

        if status != "success" and status != "unchanged":
            # The difference in values between mgmt_intf and mgmt_intf_status will help us debug which updated failed.
            vlog.err("Updating status column failed with status %s"%(status))
            return False

    return True

# Function to calculate the subnet from dotted decimal format.
def mgmt_intf_calc_dotted_netmask(mask):
    bits = 0
    for i in xrange(32 - mask, 32):
        bits |= (1 << i)
    return inet_ntoa(pack('>I', bits))

# Function to update the values populated by DHCP client to ovsdb.
# To Do: This function should be called based on interrupt. Now it is called every 2 seconds.
def mgmt_intf_update_dhcp_param(idl):

    mgmt_intf = MGMT_INTF_NULL_VAL

    # Retrieve the mode and interface from config table
    for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
        if ovs_rec.mgmt_intf:
            mgmt_intf = ovs_rec.mgmt_intf.get(MGMT_INTF_KEY_NAME, MGMT_INTF_NULL_VAL)

    if mgmt_intf == MGMT_INTF_NULL_VAL:
        vlog.err("Could not update DHCP values. Management Interface was not available.")
        return False

    # If mode is not dhcp then dont update anything.
    if mode_val != MGMT_INTF_MODE_DHCP:
        return True

    # Initialize the values to be used.
    data = {}
    is_updt = False

    status_data = {}
    # Get the cuurent values from status column
    for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
        if ovs_rec.mgmt_intf_status:
            status_data = ovs_rec.mgmt_intf_status
            ipv6_link_local = status_data.get(MGMT_INTF_KEY_IPV6_LINK_LOCAL,DEFAULT_IPV6)
            if ipv6_link_local != DEFAULT_IPV6:
                data[MGMT_INTF_KEY_IPV6_LINK_LOCAL] = ipv6_link_local
    try:
        ipr = IPRoute()
        if ipr.get_addr(label=mgmt_intf):
            dhcp_ip_list = [x.get_attr('IFA_ADDRESS') for x in ipr.get_addr(label=mgmt_intf)]
            if not dhcp_ip_list:
                # Mode is DHCP but no IP. Resolved might write back the default values.
                # So flush the DNS file.
                mgmt_intf_clear_dns_conf()
                ipr.close()
                return True

            # Get the first IP address. We handle only one IP address currently.
            dhcp_ip = dhcp_ip_list[0]
            # update the ovsdb only if the already existing value is different from the dhcp populated value.
            ovsdb_ip = status_data.get(MGMT_INTF_KEY_IP, DEFAULT_IPV4)
            if (dhcp_ip != ovsdb_ip) and (dhcp_ip != DEFAULT_IPV4):
                dhcp_prefix_list = [x['prefixlen'] for x in ipr.get_addr(label=mgmt_intf)]
                if not dhcp_prefix_list:
                # Mode is DHCP but no IP. Resolved might write back the default values.
                # So flush the DNS file.
                    mgmt_intf_clear_dns_conf()
                    ipr.close()
                    return True

                dhcp_prefix = dhcp_prefix_list[0]
                data[MGMT_INTF_KEY_IP] = dhcp_ip
                data[MGMT_INTF_KEY_SUBNET] = mgmt_intf_calc_dotted_netmask(dhcp_prefix)
                is_updt = True

        if ipr.get_default_routes(table=254):
            dhcp_gw = [x.get_attr('RTA_GATEWAY') for x in ipr.get_default_routes(table=254)][0]
            # update the ovsdb only if the already existing value is different from the dhcp populated value.
            ovsdb_gw = status_data.get(MGMT_INTF_KEY_DEF_GW, DEFAULT_IPV4)
            if (dhcp_gw != ovsdb_gw) and (dhcp_gw != DEFAULT_IPV4):
                data[MGMT_INTF_KEY_DEF_GW] = dhcp_gw
                is_updt = True

        ipr.close()
    except NetlinkError as e:
        vlog.err("Updating IP and gateway from DHCP failed with code %d"%e.code)
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        return False

    try:
        start = 0
        end = 0

        fd = open(DNS_FILE, 'r')
        output = fd.read()
        # If no DNS address then resolved writes default values.
        # So flush out these default values.
        if DEFAULT_DNS_1 in output or DEFAULT_DNS_2 in output:
            mgmt_intf_clear_dns_conf()
            fd.close()
            return True

        # Check if any DNS is received from DHCP client.
        start = output.find("nameserver")
        if start >= 0:
            start = start + MGMT_INTF_NAMESERVER_STR_LEN
            end = output[start:].find('\n')
            end = end + start
            dhcp_dns_1 = output[start:end]
            ovsdb_dns1 = status_data.get(MGMT_INTF_KEY_DNS1, DEFAULT_IPV4)
            if (dhcp_dns_1 != ovsdb_dns1) and (dhcp_dns_1 != DEFAULT_IPV4):
                data[MGMT_INTF_KEY_DNS1] = dhcp_dns_1
                is_updt = True
        start = output[end:].find('nameserver')
        if start >= 0:
            start = start + end + MGMT_INTF_NAMESERVER_STR_LEN
            end = output[start:].find('\n')
            end = end + start
            dhcp_dns_2 = output[start:end]
            ovsdb_dns2 = status_data.get(MGMT_INTF_KEY_DNS2, DEFAULT_IPV4)
            if (dhcp_dns_2 != ovsdb_dns2) and (dhcp_dns_2 != DEFAULT_IPV4):
                data[MGMT_INTF_KEY_DNS2] = dhcp_dns_2
                is_updt = True
        fd.close()
    except IOError:
        vlog.err("File operation failed for file " + DNS_FILE)

    if is_updt:
        txn = ovs.db.idl.Transaction(idl)

        for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
            if ovs_rec.mgmt_intf:
                break

        setattr(ovs_rec, "mgmt_intf_status", data)
        status = txn.commit_block()
        if status != "success" and status != "unchanged":
            vlog.err("Updating ovsdb for dhcp parameter failed with status %s"%(status))
            return False
    return True

# Function to update the values populated by DHCP client to ovsdb
def mgmt_intf_update_dhcp_param_ipv6(idl):

    mgmt_intf = MGMT_INTF_NULL_VAL

    # Retrieve the mode and interface from config table
    for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
        if ovs_rec.mgmt_intf:
            mgmt_intf = ovs_rec.mgmt_intf.get(MGMT_INTF_KEY_NAME, MGMT_INTF_NULL_VAL)

    if mgmt_intf == MGMT_INTF_NULL_VAL:
        vlog.err("Could not update DHCP values. Management Interface was not available.")
        return False

    # If mode is not dhcp then dont update anything.
    if mode_val != MGMT_INTF_MODE_DHCP:
        return True

    # Initialize the values to be used.
    is_updt = False

    status_data = {}
    # Get the cuurent values from status column
    for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
        if ovs_rec.mgmt_intf_status:
            status_data = ovs_rec.mgmt_intf_status

    dhcp_ipv6 = status_data.get(MGMT_INTF_KEY_IPV6,DEFAULT_IPV6)
    dhcp_gw_ipv6 = status_data.get(MGMT_INTF_KEY_DEF_GW_V6,DEFAULT_IPV6)

    try:
        ipr = IPRoute()
        # lookup interface by name
        dev = ipr.link_lookup(ifname=mgmt_intf)[0]
        #update IPv6 global address in DB
        if ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_GLOBAL):
            dhcp_ip_list = [x.get_attr('IFA_ADDRESS') for x in ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_GLOBAL)]
            if not dhcp_ip_list:
                # Mode is DHCP but no IP. Resolved might write back the default values.
                # So flush the DNS file
                flush_dns_file()
                return True

            dhcp_ip = dhcp_ip_list[0]
            dhcp_prefix_list = [x['prefixlen'] for x in ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_GLOBAL)]
            dhcp_prefix = dhcp_prefix_list[0]
            dhcp_addr_prefix = dhcp_ip + "/" + str(dhcp_prefix)
            #update the ovsdb only if the already existing value is different from the dhcp populated value
            if (dhcp_ipv6 != dhcp_addr_prefix) and (dhcp_addr_prefix != DEFAULT_IPV6):
                dhcp_ipv6 = dhcp_addr_prefix
                is_updt = True

        #Update default-gateway-ipv6
        if ipr.get_default_routes(family=AF_INET6):
            cfg_gw_ipv6 = [x.get_attr('RTA_GATEWAY') for x in ipr.get_default_routes(family=AF_INET6)][0]
            #update the ovsdb only if the already existing value is different from the dhcp populated value
            if (dhcp_gw_ipv6 != cfg_gw_ipv6) and (cfg_gw_ipv6 != DEFAULT_IPV6):
                dhcp_gw_ipv6 = cfg_gw_ipv6
                is_updt = True

        ipr.close()

    except NetlinkError as e:
        vlog.err("Updating DHCP Ipv6 values on Mgmt Interface %s failed with error code=%d", mgmt_intf, e.code )
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        return False

    if is_updt:
        txn = ovs.db.idl.Transaction(idl)

        for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
                data = ovs_rec.mgmt_intf_status
                break

        if dhcp_ipv6 != DEFAULT_IPV6:
            data[MGMT_INTF_KEY_IPV6] = dhcp_ipv6

        if dhcp_gw_ipv6 != DEFAULT_IPV6:
            data[MGMT_INTF_KEY_DEF_GW_V6] = dhcp_gw_ipv6

        setattr(ovs_rec, "mgmt_intf_status", data)
        status = txn.commit_block()
        if status != "success" and status != "unchanged":
            vlog.err("Updating ovsdb for ipv6 parameter populated from dhcp failed with status %s"%(status))
            return False

    return True

# Update IPv6 link local address in DB status column
def mgmt_intf_update_ipv6_linklocal(idl):

    is_updt = False

    status_data = {}
    # Get the cuurent values from status column
    for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
        if ovs_rec.mgmt_intf_status:
            status_data = ovs_rec.mgmt_intf_status
        if ovs_rec.mgmt_intf:
            mgmt_intf = ovs_rec.mgmt_intf.get(MGMT_INTF_KEY_NAME, MGMT_INTF_NULL_VAL)

    ipv6_link_local = status_data.get(MGMT_INTF_KEY_IPV6_LINK_LOCAL,DEFAULT_IPV6)

    try:
        ipr = IPRoute()
        # lookup interface by name
        dev = ipr.link_lookup(ifname=mgmt_intf)[0]

        # Update link local address in DB
        if ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_LINK_LOCAL):
            dhcp_ip_list = [x.get_attr('IFA_ADDRESS') for x in ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_LINK_LOCAL)]

            dhcp_ip = dhcp_ip_list[0]
            dhcp_prefix_list = [x['prefixlen'] for x in ipr.get_addr(index=dev,family = AF_INET6,scope = SCOPE_IPV6_LINK_LOCAL)]
            dhcp_prefix = dhcp_prefix_list[0]
            ipv6_link = dhcp_ip + "/" + str(dhcp_prefix)
            #update the ovsdb only if the already existing value is different from the dhcp populated value
            if (ipv6_link_local != ipv6_link) and (ipv6_link != DEFAULT_IPV6):
                ipv6_link_local = ipv6_link
                is_updt = True

        ipr.close()
    except NetlinkError as e:
        vlog.err("Updating Ipv6 link local on Mgmt Interface failed with error code=%d", e.code )
        ipr.close()
        return False
    except:
        vlog.err("Unexpected error:" + str(sys.exc_info()[0]))
        ipr.close()
        return False

    if is_updt:
        txn = ovs.db.idl.Transaction(idl)

        for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
                data = ovs_rec.mgmt_intf_status
                break

        data[MGMT_INTF_KEY_IPV6_LINK_LOCAL] = ipv6_link_local

        setattr(ovs_rec, "mgmt_intf_status", data)
        status = txn.commit_block()
        if status != "success" and status != "unchanged":
            vlog.err("Updating ovsdb for ipv6 link local failed with status %s"%(status))
            return False

    return True

# This function is not called. But maintained for use during debugging.
def terminate():
    global exiting

    exiting = True
    return True

# Function to wait till idl seq no has changed.
def mgmt_intf_run(idl,seqno):

    idl.run()

    if idl.change_seqno != seqno:
        mgmt_intf_cfg_update(idl)
        seqno = idl.change_seqno

    # To DO: For now we are checking for DHCP populated values once in every 2 seconds.
    #        Will modify to update only if it gets change interrupt.
    mgmt_intf_update_ipv6_linklocal(idl)
    mgmt_intf_update_dhcp_param(idl)
    mgmt_intf_update_dhcp_param_ipv6(idl)

#------------------ wait_for_config_complete() ----------------
def wait_for_config_complete(idl):

    system_is_configured = 0
    while system_is_configured == 0:
        for ovs_rec in idl.tables[OPEN_VSWITCH_TABLE].rows.itervalues():
            if ovs_rec.cur_cfg is not None and ovs_rec.cur_cfg != 0:
               system_is_configured = ovs_rec.cur_cfg
               break

        poller = ovs.poller.Poller()
        idl.run()
        idl.wait(poller)
        poller.block()

def main():
    global exiting

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--database', metavar="DATABASE",
                        help="A socket on which ovsdb-server is listening.",
                        dest='database')

    ovs.vlog.add_args(parser)
    ovs.daemon.add_args(parser)
    args = parser.parse_args()
    ovs.vlog.handle_args(args)
    ovs.daemon.handle_args(args)

    if args.database is None:
        remote = DEF_DB
    else:
        remote = args.database

    schema_helper = ovs.db.idl.SchemaHelper(location=OVS_SCHEMA)
    schema_helper.register_columns(OPEN_VSWITCH_TABLE, ["cur_cfg"])
    schema_helper.register_columns(OPEN_VSWITCH_TABLE, ["mgmt_intf"])
    schema_helper.register_columns(OPEN_VSWITCH_TABLE, ["mgmt_intf_status"])

    idl = ovs.db.idl.Idl(remote, schema_helper)

    ovs.daemon.daemonize()

    ovs.unixctl.command_register("exit", "", 0, 0, mgmt_intf_unixctl_exit, None)
    error, unixctl_server = ovs.unixctl.server.UnixctlServer.create(None)
    if error:
        ovs.util.ovs_fatal(error, "could not create unixctl server", vlog)

    seqno = idl.change_seqno  # Sequence number when we last processed the db.

    # Wait until the ovsdb sync up.
    while (seqno == idl.change_seqno):
        idl.run()
        poller = ovs.poller.Poller()
        idl.wait(poller)
        poller.block()

    wait_for_config_complete(idl)

    # Start the DHCP client. It is ok if it fails to start here, since depending on the mode we might restart it again.
    # Since we have not yet read the ovsdb we dont know the interface. So passing NULL here.
    mgmt_intf_start_dhcp_client(idl, MGMT_INTF_NULL_VAL)

    while not exiting:
        mgmt_intf_run(idl,seqno)

        unixctl_server.run()

        poller = ovs.poller.Poller()
        unixctl_server.wait(poller)
        idl.wait(poller)
        poller.timer_wait_until(ovs.timeval.msec() + 5000)
        poller.block()

        if exiting:
            break;

        seqno = idl.change_seqno

    # Daemon Exit.
    unixctl_server.close()
    idl.close()

    return

if __name__ == '__main__':
    try:
        main()
    except SystemExit:
        # Let system.exit() calls complete normally.
        raise
    except:
        vlog.exception("traceback")
        sys.exit(ovs.daemon.RESTART_EXIT_CODE)
